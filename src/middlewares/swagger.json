{
	"openapi": "3.0.0",
	"info": {
		"title": "Employee Microservice",
		"version": "1.0.0",
		"description": "This text describes an API that serves as a microservice for managing employee and department information in organizations. The API enables users to perform various operations such as retrieving, creating, updating, and deleting data, and also supports authentication and authorization mechanisms to ensure data security. Additionally, the API is designed to be scalable, reliable, and user-friendly, making it a useful tool for managing employee and department data in any organization."
	},
	"swaggerRouter": {
		"defaultController": "Employee",
		"controllers": {},
		"useStubs": false
	},
	"servers": [
		{
			"url": "http://localhost:1234"
		}
	],
	"paths": {
		"/employees": {
			"get": {
				"summary": "Get all employees",
				"description": "Return a message with all the employees there are and data with all the employees",
				"responses": {
					"200": {
						"description": "N Employees found",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"$ref": "#/components/schemas/Employee"
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Create new employee",
				"description": "Create a new employee with the data provided in the request body",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Employee"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The employee has been created successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"$ref": "#/components/schemas/Employee"
								}
							}
						}
					},
					"409": {
						"description": "The employee with code: N already exists in the database"
					},
					"400": {
						"description": "The department does not exist"
					}
				}
			}
		},
		"/employees/{code}": {
			"get": {
				"summary": "Get an employee for code",
				"description": "Returns a specific employee based on the code provided in the route",
				"parameters": [
					{
						"code": {
							"type": "integer",
							"description": "Primary id of the employee with a width of 10"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The employee has been found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"$ref": "#/components/schemas/Employee"
								}
							}
						}
					},
					"400": {
						"description": "The employee does not exist in the database"
					}
				}
			},
			"patch": {
				"summary": "Update a employee by code",
				"description": "Updates the data for a specific employee based on the code provided in the route",
				"parameters": [
					{
						"code": {
							"type": "integer",
							"description": "Primary id of the employee with a width of 10"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Employee"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Employee found successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"$ref": "#/components/schemas/Employee"
								}
							}
						}
					},
					"400": {
						"description": "The department does not exist"
					},
					"409": {
						"description": "The employee does not exist in the database"
					}
				}
			},
			"delete": {
				"summary": "Delete a employee by code",
				"description": "Delete a specific employee based on the ID provided in the route",
				"parameters": [
					{
						"code": {
							"type": "integer",
							"description": "Primary id of the employee with a width of 10"
						}
					}
				],
				"responses": {
					"204": {
						"description": "The employee identified with: N has been deleted successfully"
					},
					"400": {
						"description": "The employee does not exist in the database"
					}
				}
			}
		},
		"/departments": {
			"get": {
				"summary": "Get all departments",
				"description": "Return a message with all the departments there are and data with all the departments",
				"responses": {
					"200": {
						"description": "N Employees found",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"$ref": "#/components/schemas/Department"
								}
							}
						}
					}
				}
			}
		},
		"post": {
			"summary": "Create new department",
			"description": "Create a new departments with the data provided in the request body",
			"requestBody": {
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Department"
						}
					}
				}
			},
			"responses": {
				"201": {
					"description": "The department has been created successfully",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"$ref": "#/components/schemas/Department"
							}
						}
					}
				},
				"409": {
					"description": "The departments with code: N already exists in the database"
				}
			}
		},
		"/departments/{code}": {
			"get": {
				"summary": "Get an department for code",
				"description": "Returns a specific department based on the code provided in the route",
				"parameters": [
					{
						"code": {
							"type": "integer",
							"description": "Primary id of the department with a width of 10"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The department has been found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"$ref": "#/components/schemas/Department"
								}
							}
						}
					},
					"400": {
						"description": "The department does not exist"
					}
				}
			},
			"patch": {
				"summary": "Update a department by code",
				"description": "Updates the data for a specific department based on the code provided in the route",
				"parameters": [
					{
						"code": {
							"type": "integer",
							"description": "Primary id of the department with a width of 10"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Department"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Department found successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"$ref": "#/components/schemas/Department"
								}
							}
						}
					},
					"400": {
						"description": "The department does not exist"
					}
				}
			},
			"delete": {
				"summary": "Delete a department by code",
				"description": "Delete a specific department based on the ID provided in the route",
				"parameters": [
					{
						"code": {
							"type": "integer",
							"description": "Primary id of the department with a width of 10"
						}
					}
				],
				"responses": {
					"204": {
						"description": "The department identified with: N has been deleted successfully"
					},
					"400": {
						"description": "The department does not exist in the database"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Employee": {
				"type": "object",
				"required": [
					"code",
					"nif",
					"name",
					"firstLastName",
					"secondLastName",
					"department"
				],
				"properties": {
					"code": {
						"type": "integer",
						"description": "Primary id of the employee with a width of 10"
					},
					"nif": {
						"type": "string",
						"description": "Tax identification code with length is 9"
					},
					"name": {
						"type": "string",
						"description": "Name the employee with max length of 100"
					},
					"firstLastName": {
						"type": "string",
						"description": "First Last name employee with max length of 100"
					},
					"secondLastName": {
						"type": "string",
						"description": "Second Last name employee with max length of 100"
					},
					"department": {
						"type": "integer",
						"description": "foreign code of department with a width of 10"
					}
				}
			},
			"Department": {
				"type": "object",
				"required": ["code", "name", "estimate"],
				"properties": {
					"code": {
						"type": "integer",
						"description": "Primary id of the department with a width of 10"
					},
					"name": {
						"type": "string",
						"description": "Name the department with max length of 100"
					},
					"estimate": {
						"type": "integer",
						"description": "Float the department"
					},
					"employees": {
						"type": "array",
						"description": "Number for employees code in department"
					}
				}
			}
		}
	}
}
